'##############
'Matrix Script
'##############
' SCRIPTS PLUS MOD 1.1

'(c) 17.09.2013 Marcel Kuhnt
'(c) 09.02.2015 Adapted for Chicago


'Script Version: 1.0
'Omsi release: 2.0

'Needs:
'- Cockpit (Batterietrennschalter)
'- Clever Dev

'NrSpecRandom Seed Area:
'971: Anzahl der Fehlerpixel pro Jahr


'Revision History:
'- Marcel Kuhnt		29.09.2012	Created from scratch
'- Marcel Kuhnt		17.09.2013	Steckschilder für ausgewählte Ziele
'- Marcel Kuhnt		17.09.2013	Seitenschild
'- Marcel Kuhnt		13.10.2013	Neuer Seitenschildpfad
'- Marcel Kuhnt		20.12.2013	Bugfix: Steckschild-Init
'- Darius Bode		09.02.2015	Modified for Chicago
'- John Marbella	08.07.2016	Test Modifications for New John City
'- John Marbella	16.07.2016	Fixed compatibility with other routes
'- John Marbella	29.07.2016	Update to 1.1
'------------------------------------------------------------------------------------------


{macro:Matrix_init}

	-1 (S.L.Matrix_RefreshCursor)
	(L.S.Year) (C.L.Matrix_Baujahr) - 0.01 max (C.L.Matrix_Fehlerpixel_pro_Jahr) * 971 (M.V.NrSpecRandom) 1 + * (S.L.Matrix_Fehlerpixel)
	
	"DBC_matrix_T" (M.V.GetFontIndex) (S.L.Font_T)
	"DBC_matrix_S" (M.V.GetFontIndex) (S.L.Font_S)
	"DBC_matrix_M" (M.V.GetFontIndex) (S.L.Font_M)
	"DBC_matrix_L" (M.V.GetFontIndex) (S.L.Font_L)
	
	0 3000 random 1000 / (S.L.matrix_timer_zero)

{end}


{trigger:ai_scheduled_settarget}

	(L.L.AI) !
		{if}
			(L.$.SetLineTo) (S.$.clever_string_line)
			(L.L.AI_target_index) (S.L.clever_int_dest)
			
			(L.L.clever_run_active)
				{if}
					0 (S.L.clever_timer) (S.L.clever_int_run) (S.L.clever_run_active) (S.L.clever_init_run)
				{endif}
				
		{endif}	
		
	(L.L.matrix_timer_zero) (S.L.matrix_timer) 0 (S.L.matrix_flip) (S.L.matrix_page)

{end}

{macro:Matrix_frame}


	(L.L.matrix_frame_init) !
		{if}
			1 (M.V.GetDepotStringGlobal) "True" $=
			0 (M.V.GetDepotStringGlobal) "DBC_Chicago" $= ||
				{if}
					1 (S.L.chicago)
				{endif}
				
			0 (M.V.GetDepotStringGlobal) "NewJohnCity" $=
				{if}
					2 (S.L.clever_int_dest)
				{endif}
				
			1 (S.L.matrix_frame_init)
		{endif}
		
	(L.L.clever_on)
		{if}
		
			1 (S.L.matrix_on)
					
			(L.L.Envir_Brightness) 0.4 <
				{if}
					0 (S.L.matrix_bright)
				{endif}
				
			(L.L.Envir_Brightness) 0.55 >
				{if}
					1 (S.L.matrix_bright)
				{endif}
			
		{else}
			0 (S.L.matrix_bright) (S.L.matrix_on)
		{endif}

 
'******************************
'    Terminus-Matrix
'******************************

'Erster Schritt: Linie erstellen:


	(L.$.clever_string_line) (L.$.Matrix_Nr) $= !
	(L.L.clever_int_dest) 5 (M.V.GetTerminusString) $length 0 > (L.L.clever_int_dest) 5 (M.V.GetTerminusString) (L.$.Matrix_Nr_Rear) $= ! && ||
	(L.L.clever_int_dest) 5 (M.V.GetTerminusString) $length 0 = (L.$.Matrix_Nr_Rear) $length 0 > && ||
	(L.L.clever_on) &&
	{if}

		3 (M.V.GetDepotStringGlobal) "LOCKEDLINE" $=
		{if}
			(L.L.clever_int_dest) 7 (M.V.GetTerminusString) $length 0 >
			{if}
			(L.L.clever_int_dest) 7 (M.V.GetTerminusString) (S.$.Matrix_Nr) $StrToFloat trunc (S.L.clever_int_line)
			{else}
			(L.$.clever_string_line) (S.$.Matrix_Nr) $StrToFloat trunc (S.L.clever_int_line)
			{endif}
		{else}
		(L.$.clever_string_line) (S.$.Matrix_Nr) $StrToFloat trunc (S.L.clever_int_line)
		{endif}
		
		(L.L.clever_int_dest) 5 (M.V.GetTerminusString) $length 0 >
			{if}
				(L.L.clever_int_dest) 5 (M.V.GetTerminusString) (S.$.Matrix_Nr_Rear)
			{else}
				(L.$.clever_string_line) (S.$.Matrix_Nr_Rear)
			{endif}
				
		(L.$.Matrix_Nr) "0" $= {if} " " (S.$.Matrix_Nr) {endif} 
		(L.$.Matrix_Nr_Rear) "0" $= {if} " " (S.$.Matrix_Nr_Rear) {endif}
	{endif}


'	Wechselfunktion
	
	(L.L.matrix_flip)
		{if}
			(L.L.matrix_timer) (L.S.Timegap) + (S.L.matrix_timer)			
		{else}
			(L.L.matrix_timer_zero) (S.L.matrix_timer) 0 (S.L.matrix_page)
		{endif}
			
			
'Zweiter Schritt: Ziel erstellen:

	(L.L.clever_int_dest) s0 (L.L.Matrix_TerminusIndex_Last) s1 = !
	(L.L.matrix_timer) (C.L.Matrix_Change_Sec) (L.L.matrix_timer_zero) + > ||
	(L.L.clever_on) &&
	{if}
		
		l0 1 (M.V.GetTerminusString) 
		(S.$.Matrix_TerminusL1)
		
		l0 2 (M.V.GetTerminusString)
		(S.$.Matrix_TerminusL2)
		
		l0 3 (M.V.GetTerminusString)
		(S.$.Matrix_TerminusL3)
		
		l0 4 (M.V.GetTerminusString)
		(S.$.Matrix_TerminusL4)
		
		
		(L.$.Matrix_TerminusL3) $length
		(L.$.Matrix_TerminusL4) $length + 0 >
		
			{if}
				1 (S.L.matrix_flip)
			{else}
			
			(L.$.Matrix_PR1) $length + 0 >
				{if}
				1 (S.L.matrix_flip)
				{else}
				0 (S.L.matrix_flip) (S.L.matrix_page)
				{endif}	
			{endif}

'Wenn nur die untere Zeile beschrieben ist, dann diese nach oben und untere leeren:
		(L.$.Matrix_TerminusL1) "" $=
		{if}
			(L.$.Matrix_TerminusL2) (S.$.Matrix_TerminusL1)
			"" (S.$.Matrix_TerminusL2)
		{endif}
		
		(L.$.Matrix_TerminusL3) "" $=
		{if}
			(L.$.Matrix_TerminusL4) (S.$.Matrix_TerminusL3)
			"" (S.$.Matrix_TerminusL4)
		{endif}
	{endif}

'Dritter Schritt: Speicherbitmap schreiben:

    (L.L.clever_int_line) (L.L.Matrix_Nr_Last) = ! 
    (L.L.clever_int_dest) s0 (L.L.Matrix_TerminusIndex_Last) s1 = ! ||
	(L.L.matrix_timer) (C.L.Matrix_Change_Sec) (L.L.matrix_timer_zero) + > ||
    (L.L.clever_on) &&
    {if}
			
		(L.L.matrix_timer) (C.L.Matrix_Change_Sec) (L.L.matrix_timer_zero) + >
			{if}
				(L.L.matrix_timer_zero) (S.L.matrix_timer)
				
				(L.$.Matrix_PR1) "" $=
				{if}
					(L.$.Matrix_TerminusL3) $length
					(L.$.Matrix_TerminusL4) $length + 0 >
						{if}
							(L.L.matrix_page) ! (S.L.matrix_page)
						{else}
						0 (S.L.matrix_page)
						{endif}
				{else}
					(L.L.matrix_page) 2 =
						{if}
							0 (S.L.matrix_page)
						{else}
								(L.$.Matrix_TerminusL3) $length
								(L.$.Matrix_TerminusL4) $length + 0 >
								{if}
									(L.L.matrix_page) 1 + (S.L.matrix_page)
								{else}
									2 (S.L.matrix_page)
								{endif}
						{endif}
				{endif}
			{endif}
			
	l0 (S.L.Matrix_TerminusAct)  (S.L.target_index_int)
	(L.L.clever_int_line) (S.L.Matrix_Nr_Last)
	{if}

		
'3.0 Initialisieren der Bitmap und setzen der Farbe:

		0 (M.V.STNewTex)
		0 (M.V.STLock)

		0
		0
		255
		0
		0
		(M.V.STSetColor)


'Ab hier gelten folgende Register-Zuordnungen:
'l0 = Fontindex
'l1 = Stringlänge (Pixel)
'l2 = Y-Offset
'l3 = Verfügbare Länge
'l4 = One-Line
'l5 = Centre
'l6 = Blocking factor pixels
'l7 = (max.) Sperrung



		(L.$.Matrix_Nr) "" $=
		(L.$.Matrix_Nr) "^" $= ||
		(L.$.Matrix_TerminusL3) "E X P R E S S" $= (L.L.matrix_page) && ||
		(L.$.Matrix_TerminusL4) "NORTH OF STEELES" $= (L.L.matrix_page) && ||
		(L.$.Matrix_TerminusL4) "WEST OF AIRPORT" $= (L.L.matrix_page) && ||
		(L.L.matrix_page) 2 = ||
		{if}
			0 s1 (S.L.Matrix_Xpos)
		{else}

'3.A.0 Sperrpixelfaktor (l6):
'			(L.$.Matrix_Nr) $length 1 - 0 max s6
			0 s6
'3.A.05 Setzen der Maximalbreite:
			35 s3
'3.A.1 Bestimmen des Fonts der Linie (vorne):

			(L.$.Matrix_Nr) (L.L.Font_L) s0 (M.V.TextLength) l6 + s1
			0 s7

'	l0: Schriftart, l1: Länge in Pixeln

'3.A.2 Schreiben:
			0
			0
			0
			l0
			2
			l7
			(L.$.Matrix_Nr)
			(M.V.STTextOut)

'3.A.3 Bestimmen des Startpunktes des Zieles (Matrix_Xpos):
		l1 1 + 30 max (S.L.Matrix_Xpos)

	
'3.A.4 Bestimmen des Fonts der Linie (Seite):

			1 s2
			(L.$.Matrix_Nr) (L.L.Font_M) s0 (M.V.TextLength) s1

'	l0: Schriftart, l1: Länge in Pixeln

'3.A.5 Berechnen der Sperrung:
			l3 l1 - l6 / trunc 1 min s7
			l1 l6 l7 * + s1
'3.A.6 Berechnen des Zentrierungsaufschlages (l5):
			l3 l1 - 2 / trunc s5

'3.A.7 Schreiben:
			0
			l5
			16 l2 +
			l0
			2
			l7
			(L.$.Matrix_Nr)
			(M.V.STTextOut)
			
		{endif}
		
		(L.$.Matrix_Nr_Rear) "" $=
		{if}
			0 s1 (S.L.Matrix_Xpos)
		{else}
			
' LINIE HECK

'3.A.05 Setzen der Maximalbreite:
			42 s3
	
'3.A.4 Bestimmen des Fonts der Linie (Heck):

	(L.$.Matrix_Nr_Rear) (L.L.Font_L) s0 (M.V.TextLength) s1
	

'l0: Schriftart, l1: Länge in Pixeln

'3.A.5 Berechnen der Sperrung:
			l3 l1 - l6 / trunc 1 min s7 
			l1 l6 l7 * + s1
'3.A.6 Berechnen des Zentrierungsaufschlages (l5):
			l3 l1 - 2 / trunc s5
'3.A.7 Schreiben:
			0
			119 l5 +
			16
			l0
			2
			l7
			(L.$.Matrix_Nr_Rear)
			(M.V.STTextOut)		
			
		{endif}


'Schreiben des Zieles Front-Anzeige:

		0 (S.L.Matrix_Ypos)

		(M.L.Matrix_WriteTerminus)

'Und Schreiben des Zieles Seitenanzeige:

		59 (S.L.Matrix_Xpos)
		16 (S.L.Matrix_Ypos)

		(M.L.Matrix_WriteTerminus_side)

'Fertig: Unlocken


		0 (M.V.STUnlock)
		
	    (L.L.Matrix_TerminusAct) (S.L.Matrix_TerminusIndex_Last)

	{endif}
	
'	RefreshCursor zurücksetzen:
	0 (S.L.Matrix_RefreshCursor)
	
    {endif}



' Nun sollen die Pixel schrittweise übertragen werden - zunächst mit 1Pixel/Frame:
	(L.L.clever_on)
	(L.L.Matrix_RefreshCursor) 0 >= &&
	{if}	


'Locken:
		0 (M.V.STLock)
		1 (M.V.STLock)



		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)		
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		(M.L.Matrix_PixelRefresh)
		
		
'		Unlocken:

		0 (M.V.STUnlock)
		1 (M.V.STUnlock)
		1 (M.V.STFilter)		
	
	{endif}
	

{end}



'*------------------------------------------------------------------------------------------------------------

'##############################
{macro:Matrix_PixelRefresh}

		(L.L.Matrix_RefreshCursor) (C.L.Matrix_HxW) 2 * >=
		(L.L.Matrix_RefreshCursor) 0 < ||
		{if}
			(L.L.clever_int_line) 99 =
			{if}
				-1
			{else}
				-1
			{endif}
				
			(S.L.Matrix_RefreshCursor)
						
		{else}


'Calculate X and Y:
'l0: Level (Front/Side)
'l1: X
'l2: Y

			(L.L.Matrix_RefreshCursor) (C.L.Matrix_HxW) / trunc s0
			(L.L.Matrix_RefreshCursor) (C.L.Matrix_HxW) % (C.L.Matrix_Height) / trunc s1
			(L.L.Matrix_RefreshCursor) (C.L.Matrix_HxW) % (C.L.Matrix_Height) % s2

'Calculate error pixels:
			(L.L.Matrix_RefreshCursor) (M.V.NrSpecRandom) 2 * (L.L.Matrix_Fehlerpixel) / s6
			1 <
			{if}
				255 s7
			{else}
			l6 2 <
			{if}
				0 s7
			{else}
'If 99er code, then everything is green
			(L.L.clever_int_line) 99 =
			{if}
				0
				l1
				l2 l0 16 * +
				(M.V.STReadPixel) 

				0 (M.V.STGetR) s7
			{else}

'set color:
				0
				l1
				l2 l0 16 * +
				(M.V.STReadPixel) 

				0 (M.V.STGetR) s7
			{endif}
			{endif}
			{endif}


			1
			l7
			255
			255
			255
			(M.V.STSetColor)

'Pixel zeichnen:
			1
			l1 (C.L.Matrix_PixelFactor) * s4
			l2 l0 16 * + (C.L.Matrix_PixelFactor) * s5
			l4 (C.L.Matrix_PixelFactor) + 0 -
			l5 (C.L.Matrix_PixelFactor) + 0 -
			(M.V.STDrawRect)

'Cursor verschieben:
			(L.L.Matrix_RefreshCursor) 1 + (S.L.Matrix_RefreshCursor)
		{endif}
{end}

'##############################

{macro:Matrix_WriteTerminus}

(L.L.matrix_page) !
{if}

'3.B.2 Bestimmen der verbliebenen Länge des Zieles vorne (l3):
		160 (L.L.Matrix_Xpos) - s3
'CENTER2

'3.B.3 Einzeilig (l4)?
		(L.$.Matrix_TerminusL2) "" $= s4

'3.B.4 Bestimmen des Fonts der Zeile 1 des Ziels (l0/l1):
		0 s6
'		WENN EINZEILIG
		l4 {if}
			9 s7
			0 s2
			(L.$.Matrix_TerminusL1) (L.L.Font_L) s0 (M.V.TextLength) s1
			l3 15 - > 
			{if}
				7 s7
				0 s2
				
					(L.$.Matrix_TerminusL1) (L.L.Font_M) s0 (M.V.TextLength) s1
					l3 15 - >
					{if}
						4 s7
						0 s2
						(L.$.Matrix_TerminusL1) (L.L.Font_M) s0 (M.V.TextLength) s1
					{endif}
					
				l0 (L.L.Font_M) = {if} 15 s6 {endif}
				
			{endif}
		
'		WENN ZWEIZEILIG			
		{else}
			(L.$.Matrix_TerminusL1) $length 20 >= 
			{if}
			
			7 s7
			0 s2
			(L.$.Matrix_TerminusL1) (L.L.Font_T) s0 (M.V.TextLength) s1
			l3 >
			{if}
				0 s2
				6 s7
				(L.$.Matrix_TerminusL1) (L.L.Font_T) s0 (M.V.TextLength) s1
				l3 >
				{if}
					0 s2
					5 s7
					(L.$.Matrix_TerminusL1) (L.L.Font_T) s0 (M.V.TextLength) s1
					l3 >
					{if}
						0 s2
						4 s7
						(L.$.Matrix_TerminusL1) (L.L.Font_T) s0 (M.V.TextLength) s1
					{endif}
				{endif}
			{endif}
			{else}
			7 s7
			0 s2
			(L.$.Matrix_TerminusL1) (L.L.Font_S) s0 (M.V.TextLength) s1
			l3 >
			{if}
				0 s2
				6 s7
				(L.$.Matrix_TerminusL1) (L.L.Font_S) s0 (M.V.TextLength) s1
				l3 >
				{if}
					0 s2
					5 s7
					(L.$.Matrix_TerminusL1) (L.L.Font_S) s0 (M.V.TextLength) s1
					l3 >
					{if}
						0 s2
						4 s7
						(L.$.Matrix_TerminusL1) (L.L.Font_S) s0 (M.V.TextLength) s1
					{endif}
				{endif}
			{endif}
			{endif}
		{endif}

'3.B.6 Berechnen der Sperrung:
	l3 l1 - l6 / trunc l7 min s7
	l1 l6 l7 * + s1
'3.B.7 Berechnen des Zentrierungsaufschlages (l5):
	l3 l1 - 2 / trunc s5
'3.B.8 Schreiben:
			0
			(L.L.Matrix_Xpos) l5 +
			(L.L.Matrix_Ypos) l2 +
			l0
			2
			l7
			(L.$.Matrix_TerminusL1)
			(M.V.STTextOut)


'3.C.1 Bestimmen des Fonts der Zeile 2 des Ziels (l0/l1):
		l4 ! {if}
		
			(L.$.Matrix_TerminusL2) "EXPRESS" $=
			(L.$.Matrix_TerminusL2) "E X P R E S S" $= ||
			(L.$.Matrix_TerminusL2) "SHORT TURN" $= ||
			(L.$.Matrix_TerminusL2) "NOVA MEMBERS" $= ||
			(L.$.Matrix_TerminusL2) "BLUE NIGHT" $= ||
			(L.$.Matrix_TerminusL2) "EXTRA FARE REQUIRED" $= ||
			(L.$.Matrix_TerminusL2) "NON-STOP" $= ||
			(L.$.Matrix_Nr) $StrToFloat 500 > ||
			{if}
				7 s7
				(L.$.Matrix_TerminusL2) (L.L.Font_S) s0 (M.V.TextLength) s1
				l3 >
				{if}
					6 s7
					
					(L.$.Matrix_TerminusL2) (L.L.Font_S) s0 (M.V.TextLength) s1
					l3 >
					{if}
						5 s7
						(L.$.Matrix_TerminusL2) (L.L.Font_S) s0 (M.V.TextLength) s1
						l3 >
						{if}
							4 s7
							(L.$.Matrix_TerminusL2) (L.L.Font_S) s0 (M.V.TextLength) s1
						{endif}
					{endif}
				{endif}
			{else}
				7 s7
				(L.$.Matrix_TerminusL2) (L.L.Font_T) s0 (M.V.TextLength) s1
				l3 >
				{if}
					6 s7
				
					(L.$.Matrix_TerminusL2) (L.L.Font_T) s0 (M.V.TextLength) s1
					l3 >
					{if}
						5 s7
						(L.$.Matrix_TerminusL2) (L.L.Font_T) s0 (M.V.TextLength) s1
						l3 >
						{if}
							4 s7
							(L.$.Matrix_TerminusL2) (L.L.Font_T) s0 (M.V.TextLength) s1
						{endif}
					{endif}
				{endif}
			{endif}

'3.C.2 Berechnen des Sperrpixelfaktors: (Anzahl der Buchstaben, l6)
'	(L.$.Matrix_TerminusL2) $length 1 - 0 max s6
	0 s6
'3.C.3 Berechnen der Sperrung:
	l3 l1 - l6 / trunc l7 min s7
	l1 l6 l7 * + s1
'3.C.4 Berechnen des Zentrierungsaufschlages (l5):
	l3 l1 - 2 / trunc s5
'3.C.5 Schreiben:
			0
			(L.L.Matrix_Xpos) l5 +
			(L.L.Matrix_Ypos) 9 +
			l0
			2
			l7
			(L.$.Matrix_TerminusL2)
			(M.V.STTextOut)


		{endif}
{else}

(L.L.matrix_page) 2 =
{if}

'3.B.2 Bestimmen der verbliebenen Länge des Zieles vorne (l3):
		160 (L.L.Matrix_Xpos) - s3
'CENTER2

'3.B.3 Einzeilig (l4)?
		(L.$.Matrix_PR2) "" $= s4

'3.B.4 Bestimmen des Fonts der Zeile 1 des Ziels (l0/l1):
		0 s6
'		WENN EINZEILIG
		l4 {if}
			9 s7
			0 s2
			(L.$.Matrix_PR1) (L.L.Font_L) s0 (M.V.TextLength) s1
			l3 15 - > 
			{if}
				7 s7
				0 s2
				
					(L.$.Matrix_PR1) (L.L.Font_M) s0 (M.V.TextLength) s1
					l3 15 - >
					{if}
						4 s7
						0 s2
						(L.$.Matrix_PR1) (L.L.Font_M) s0 (M.V.TextLength) s1
					{endif}
					
				l0 (L.L.Font_M) = {if} 15 s6 {endif}
				
			{endif}
		
'		WENN ZWEIZEILIG			
		{else}
			(L.$.Matrix_PR1) $length 20 >= 
			{if}
			
			7 s7
			0 s2
			(L.$.Matrix_PR1) (L.L.Font_T) s0 (M.V.TextLength) s1
			l3 >
			{if}
				0 s2
				6 s7
				(L.$.Matrix_PR1) (L.L.Font_T) s0 (M.V.TextLength) s1
				l3 >
				{if}
					0 s2
					5 s7
					(L.$.Matrix_PR1) (L.L.Font_T) s0 (M.V.TextLength) s1
					l3 >
					{if}
						0 s2
						4 s7
						(L.$.Matrix_PR1) (L.L.Font_T) s0 (M.V.TextLength) s1
					{endif}
				{endif}
			{endif}
			{else}
			7 s7
			0 s2
			(L.$.Matrix_PR1) (L.L.Font_S) s0 (M.V.TextLength) s1
			l3 >
			{if}
				0 s2
				6 s7
				(L.$.Matrix_PR1) (L.L.Font_S) s0 (M.V.TextLength) s1
				l3 >
				{if}
					0 s2
					5 s7
					(L.$.Matrix_PR1) (L.L.Font_S) s0 (M.V.TextLength) s1
					l3 >
					{if}
						0 s2
						4 s7
						(L.$.Matrix_PR1) (L.L.Font_S) s0 (M.V.TextLength) s1
					{endif}
				{endif}
			{endif}
			{endif}
		{endif}

'3.B.6 Berechnen der Sperrung:
	l3 l1 - l6 / trunc l7 min s7
	l1 l6 l7 * + s1
'3.B.7 Berechnen des Zentrierungsaufschlages (l5):
	l3 l1 - 2 / trunc s5
'3.B.8 Schreiben:
			0
			(L.L.Matrix_Xpos) l5 +
			(L.L.Matrix_Ypos) l2 +
			l0
			2
			l7
			(L.$.Matrix_PR1)
			(M.V.STTextOut)


'3.C.1 Bestimmen des Fonts der Zeile 2 des Ziels (l0/l1):
		l4 ! {if}
		
			(L.$.Matrix_PR2) "IN EFFECT" $=
			(L.$.Matrix_PR2) "E X P R E S S" $= ||
			(L.$.Matrix_PR2) "SHORT TURN" $= ||
			(L.$.Matrix_PR2) "BLUE NIGHT" $= ||
			(L.$.Matrix_PR2) "EXTRA FARE REQUIRED" $= ||
			{if}
				7 s7
				(L.$.Matrix_PR2) (L.L.Font_S) s0 (M.V.TextLength) s1
				l3 >
				{if}
					6 s7
					
					(L.$.Matrix_PR2) (L.L.Font_S) s0 (M.V.TextLength) s1
					l3 >
					{if}
						5 s7
						(L.$.Matrix_PR2) (L.L.Font_S) s0 (M.V.TextLength) s1
						l3 >
						{if}
							4 s7
							(L.$.Matrix_PR2) (L.L.Font_S) s0 (M.V.TextLength) s1
						{endif}
					{endif}
				{endif}
			{else}
				7 s7
				(L.$.Matrix_PR2) (L.L.Font_T) s0 (M.V.TextLength) s1
				l3 >
				{if}
					6 s7
				
					(L.$.Matrix_PR2) (L.L.Font_T) s0 (M.V.TextLength) s1
					l3 >
					{if}
						5 s7
						(L.$.Matrix_PR2) (L.L.Font_T) s0 (M.V.TextLength) s1
						l3 >
						{if}
							4 s7
							(L.$.Matrix_PR2) (L.L.Font_T) s0 (M.V.TextLength) s1
						{endif}
					{endif}
				{endif}
			{endif}

'3.C.2 Berechnen des Sperrpixelfaktors: (Anzahl der Buchstaben, l6)
'	(L.$.Matrix_PR2) $length 1 - 0 max s6
	0 s6
'3.C.3 Berechnen der Sperrung:
	l3 l1 - l6 / trunc l7 min s7
	l1 l6 l7 * + s1
'3.C.4 Berechnen des Zentrierungsaufschlages (l5):
	l3 l1 - 2 / trunc s5
'3.C.5 Schreiben:
			0
			(L.L.Matrix_Xpos) l5 +
			(L.L.Matrix_Ypos) 9 +
			l0
			2
			l7
			(L.$.Matrix_PR2)
			(M.V.STTextOut)


		{endif}
{else}
'3.B.2 Bestimmen der verbliebenen Länge des Zieles vorne (l3):
		160 (L.L.Matrix_Xpos) - s3
'CENTER2

'3.B.3 Einzeilig (l4)?
		(L.$.Matrix_TerminusL4) "" $= s4

'3.B.4 Bestimmen des Fonts der Zeile 1 des Ziels (l0/l1):
		0 s6
'		WENN EINZEILIG
		
		l4 {if}
			9 s7
			0 s2
			(L.$.Matrix_TerminusL3) (L.L.Font_L) s0 (M.V.TextLength) s1
			l3 15 - > 
			{if}
				7 s7
				0 s2
				
					(L.$.Matrix_TerminusL3) (L.L.Font_M) s0 (M.V.TextLength) s1
					l3 15 - >
					{if}
						4 s7
						0 s2
						(L.$.Matrix_TerminusL3) (L.L.Font_M) s0 (M.V.TextLength) s1
						
					{endif}
				l0 (L.L.Font_M) = {if} 15 s6 {endif}
			{endif}
			
'		WENN ZWEIZEILIG			
		{else}
			(L.$.Matrix_TerminusL3) (L.$.Matrix_TerminusL1) $= 
			(L.$.Matrix_TerminusL3) "EXTRA FARE REQUIRED" $= ||
			(L.$.Matrix_TerminusL3) "SHORT TURN" $= ||
			{if}
				7 s7
				0 s2
				(L.$.Matrix_TerminusL3) (L.L.Font_S) s0 (M.V.TextLength) s1
				l3 >
				{if}
					0 s2
					6 s7
					(L.$.Matrix_TerminusL3) (L.L.Font_S) s0 (M.V.TextLength) s1
					l3 >
					{if}
						0 s2
						5 s7
						(L.$.Matrix_TerminusL3) (L.L.Font_S) s0 (M.V.TextLength) s1
						l3 >
						{if}
							0 s2
							4 s7
							(L.$.Matrix_TerminusL3) (L.L.Font_S) s0 (M.V.TextLength) s1
						{endif}
					{endif}
				{endif}
			{else}
				7 s7
				0 s2
				(L.$.Matrix_TerminusL3) (L.L.Font_T) s0 (M.V.TextLength) s1
				l3 >
				{if}
					0 s2
					6 s7
					(L.$.Matrix_TerminusL3) (L.L.Font_T) s0 (M.V.TextLength) s1
					l3 >
					{if}
						0 s2
						5 s7
						(L.$.Matrix_TerminusL3) (L.L.Font_T) s0 (M.V.TextLength) s1
						l3 >
						{if}
							0 s2
							4 s7
							(L.$.Matrix_TerminusL3) (L.L.Font_T) s0 (M.V.TextLength) s1
						{endif}
					{endif}
				{endif}
			{endif}
		{endif}
		
'3.B.6 Berechnen der Sperrung:
	l3 l1 - l6 / trunc l7 min s7
	l1 l6 l7 * + s1
'3.B.7 Berechnen des Zentrierungsaufschlages (l5):
	l3 l1 - 2 / trunc s5
'3.B.8 Schreiben:
			0
			(L.L.Matrix_Xpos) l5 +
			(L.L.Matrix_Ypos) l2 +
			l0
			2
			l7
			(L.$.Matrix_TerminusL3)
			(M.V.STTextOut)

	


'3.C.1 Bestimmen des Fonts der Zeile 2 des Ziels (l0/l1):
		l4 ! {if}
			(L.$.Matrix_TerminusL4) "EXTRA FARE REQUIRED" $=
			(L.$.Matrix_TerminusL4) "NORTH OF STEELES" $= ||
			(L.$.Matrix_TerminusL4) "WEST OF AIRPORT" $= ||
			(L.$.Matrix_TerminusL4) "LOCAL SERVICE ONLY" $= ||
			(L.$.Matrix_TerminusL4) "SHORT TURN" $= ||
			(L.$.Matrix_TerminusL4) "STATION" $= ||
			(L.$.Matrix_TerminusL4) "P A R A D E" $= ||
			(L.$.Matrix_Nr) $StrToFloat 500 > ||
			{if}
			7 s7
			(L.$.Matrix_TerminusL4) (L.L.Font_S) s0 (M.V.TextLength) s1
			l3 >
			{if}
				6 s7
				(L.$.Matrix_TerminusL4) (L.L.Font_S) s0 (M.V.TextLength) s1
				l3 >
				{if}
					5 s7
					(L.$.Matrix_TerminusL4) (L.L.Font_S) s0 (M.V.TextLength) s1
					l3 >
					{if}
						4 s7
						(L.$.Matrix_TerminusL4) (L.L.Font_S) s0 (M.V.TextLength) s1
					{endif}
				{endif}
			{endif}
			{else}
			7 s7
			(L.$.Matrix_TerminusL4) (L.L.Font_T) s0 (M.V.TextLength) s1
			l3 >
			{if}
				6 s7
				(L.$.Matrix_TerminusL4) (L.L.Font_T) s0 (M.V.TextLength) s1
				l3 >
				{if}
					5 s7
					(L.$.Matrix_TerminusL4) (L.L.Font_T) s0 (M.V.TextLength) s1
					l3 >
					{if}
						4 s7
						(L.$.Matrix_TerminusL4) (L.L.Font_T) s0 (M.V.TextLength) s1
					{endif}
				{endif}
			{endif}
			{endif}

'3.C.2 Berechnen des Sperrpixelfaktors: (Anzahl der Buchstaben, l6)
'	(L.$.Matrix_TerminusL4) $length 1 - 0 max s6
	0 s6
'3.C.3 Berechnen der Sperrung:
	l3 l1 - l6 / trunc l7 min s7
	l1 l6 l7 * + s1
'3.C.4 Berechnen des Zentrierungsaufschlages (l5):
	l3 l1 - 2 / trunc s5
'3.C.5 Schreiben:
			0
			(L.L.Matrix_Xpos) l5 +
			(L.L.Matrix_Ypos) 9 +
			l0
			2
			l7
			(L.$.Matrix_TerminusL4)
			(M.V.STTextOut)
			


		{endif}
{endif}
{endif}
{end}



{macro:Matrix_WriteTerminus_side}

(L.L.matrix_page) !
{if}

'3.B.2 Bestimmen der verbliebenen Länge des Zieles seitlich (l3):
		87 (L.L.Matrix_Xpos) - s3
'CENTER2

'3.B.3 Einzeilig (l4)?
		2 (M.V.GetDepotStringGlobal) "True" $= (L.$.Matrix_TerminusL2) "" $= || s4

		l4 {if}
			9 s7
			5 s2
			(L.$.Matrix_TerminusL1) (L.L.Font_S) s0 (M.V.TextLength) s1
			l3 62 + >
			{if}
				4 s7
				5 s2
				(L.$.Matrix_TerminusL1) (L.L.Font_T) s0 (M.V.TextLength) s1				
			{endif}
			
'		WENN ZWEIZEILIG			
		{else}
			7 s7
			2 s2
			(L.$.Matrix_TerminusL1) (L.L.Font_T) s0 (M.V.TextLength) s1
			l3 >
			{if}
				6 s7
				(L.$.Matrix_TerminusL1) (L.L.Font_T) s0 (M.V.TextLength) s1
				l3 >
				{if}
					5 s7
					(L.$.Matrix_TerminusL1) (L.L.Font_T) s0 (M.V.TextLength) s1
					l3 >
					{if}
						4 s7
						(L.$.Matrix_TerminusL1) (L.L.Font_T) s0 (M.V.TextLength) s1
					{endif}
				{endif}
			{endif}
		{endif}
'3.B.5 Berechnen des Sperrpixelfaktors: (Anzahl der Buchstaben, l6)
'	(L.$.Matrix_TerminusL1) $length 1 - 0 max s6
	0 s6
'3.B.6 Berechnen der Sperrung:
	l3 l1 - l6 / trunc l7 min s7
	l1 l6 l7 * + s1
'3.B.7 Berechnen des Zentrierungsaufschlages (l5):
	l3 l1 - 2 / trunc s5
	
	(L.$.Matrix_Nr) (L.L.Font_S) (M.V.TextLength) 0 = {if} l5 11 - s5 {endif}
	
'3.B.8 Schreiben:
			0
			(L.L.Matrix_Xpos) l5 +
			(L.L.Matrix_Ypos) l2 +
			l0
			2
			l7
			(L.$.Matrix_TerminusL1)
			(M.V.STTextOut)

	


'3.C.1 Bestimmen des Fonts der Zeile 2 des Ziels (l0/l1):
		l4 ! {if}
			7 s7
			(L.$.Matrix_TerminusL2) (L.L.Font_T) s0 (M.V.TextLength) s1
			l3 >
			{if}
				6 s7
				(L.$.Matrix_TerminusL2) (L.L.Font_T) s0 (M.V.TextLength) s1
				l3 >
				{if}
					5 s7
					(L.$.Matrix_TerminusL2) (L.L.Font_T) s0 (M.V.TextLength) s1
					l3 >
					{if}
						4 s7
						(L.$.Matrix_TerminusL2) (L.L.Font_T) s0 (M.V.TextLength) s1
					{endif}
				{endif}
			{endif}

'3.C.2 Berechnen des Sperrpixelfaktors: (Anzahl der Buchstaben, l6)
'	(L.$.Matrix_TerminusL2) $length 1 - 0 max s6
	0 s6
'3.C.3 Berechnen der Sperrung:
	l3 l1 - l6 / trunc l7 min s7
	l1 l6 l7 * + s1
'3.C.4 Berechnen des Zentrierungsaufschlages (l5):
	l3 l1 - 2 / trunc s5
	(L.$.Matrix_Nr) (L.L.Font_S) (M.V.TextLength) 0 = {if} l5 11 - s5 {endif}
'3.C.5 Schreiben:
			0
			(L.L.Matrix_Xpos) l5 +
			(L.L.Matrix_Ypos) 9 +
			l0
			2
			l7
			(L.$.Matrix_TerminusL2)
			(M.V.STTextOut)
		{endif}
{else}

'3.B.2 Bestimmen der verbliebenen Länge des Zieles vorne (l3):
		87 (L.L.Matrix_Xpos) - s3
'CENTER2

'3.B.3 Einzeilig (l4)?
		2 (M.V.GetDepotStringGlobal) "True" $= (L.$.Matrix_TerminusL4) "" $= || s4

'3.B.4 Bestimmen des Fonts der Zeile 1 des Ziels (l0/l1):

'		WENN EINZEILIG
		l4 {if}
			9 s7
			5 s2
			(L.$.Matrix_TerminusL3) (L.L.Font_S) s0 (M.V.TextLength) s1
			l3 62 + >
			{if}
				4 s7
				5 s2
				(L.$.Matrix_TerminusL3) (L.L.Font_T) s0 (M.V.TextLength) s1				
			{endif}
			
'		WENN ZWEIZEILIG			
		{else}
			7 s7
			2 s2
			(L.$.Matrix_TerminusL3) (L.L.Font_T) s0 (M.V.TextLength) s1
			l3 >
			{if}
				6 s7
				(L.$.Matrix_TerminusL3) (L.L.Font_T) s0 (M.V.TextLength) s1
				l3 >
				{if}
					5 s7
					(L.$.Matrix_TerminusL3) (L.L.Font_T) s0 (M.V.TextLength) s1
					l3 >
					{if}
						4 s7
						(L.$.Matrix_TerminusL3) (L.L.Font_T) s0 (M.V.TextLength) s1
					{endif}
				{endif}
			{endif}
		{endif}
'3.B.5 Berechnen des Sperrpixelfaktors: (Anzahl der Buchstaben, l6)
'	(L.$.Matrix_TerminusL3) $length 1 - 0 max s6
	0 s6
'3.B.6 Berechnen der Sperrung:
	l3 l1 - l6 / trunc l7 min s7
	l1 l6 l7 * + s1
'3.B.7 Berechnen des Zentrierungsaufschlages (l5):
	l3 l1 - 2 / trunc s5
	(L.$.Matrix_Nr) (L.L.Font_S) (M.V.TextLength) 0 = {if} l5 11 - s5 {endif}
'3.B.8 Schreiben:
			0
			(L.L.Matrix_Xpos) l5 +
			(L.L.Matrix_Ypos) 9 +
			l0
			2
			l7
			(L.$.Matrix_TerminusL2)
			(M.V.STTextOut)

	


'3.C.1 Bestimmen des Fonts der Zeile 2 des Ziels (l0/l1):
		l4 ! {if}
			7 s7
			(L.$.Matrix_TerminusL4) (L.L.Font_T) s0 (M.V.TextLength) s1
			l3 >
			{if}
				6 s7
				(L.$.Matrix_TerminusL4) (L.L.Font_T) s0 (M.V.TextLength) s1
				l3 >
				{if}
					5 s7
					(L.$.Matrix_TerminusL4) (L.L.Font_T) s0 (M.V.TextLength) s1
					l3 >
					{if}
						4 s7
						(L.$.Matrix_TerminusL4) (L.L.Font_T) s0 (M.V.TextLength) s1
					{endif}
				{endif}
			{endif}

'3.C.2 Berechnen des Sperrpixelfaktors: (Anzahl der Buchstaben, l6)
'	(L.$.Matrix_TerminusL4) $length 1 - 0 max s6
	0 s6
'3.C.3 Berechnen der Sperrung:
	l3 l1 - l6 / trunc l7 min s7
	l1 l6 l7 * + s1
'3.C.4 Berechnen des Zentrierungsaufschlages (l5):
	l3 l1 - 2 / trunc s5
	(L.$.Matrix_Nr) (L.L.Font_S) (M.V.TextLength) 0 = {if} l5 11 - s5 {endif}
'3.C.5 Schreiben:
			0
			(L.L.Matrix_Xpos) l5 +
			(L.L.Matrix_Ypos) 9 +
			l0
			2
			l7
			(L.$.Matrix_TerminusL4)
			(M.V.STTextOut)


		{endif}

{endif}
{end}
